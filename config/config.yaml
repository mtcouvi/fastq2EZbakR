####### GENERAL INFORMATION ABOUT THIS CONFIG #######
#
# This config file allows you to specify a number of important pieces of information that
# the fastq2EZbakR pipeline will require to run. It also allows you to set optional parameters
# for all tools that fastq2EZbakR makes use of.
#
# File paths can either be absolute (e.g., ~/path/to/file/or/directory) or relative
# to the directory in which you are calling the pipeline from (e.g., data/fastq/WT_1 in the 
# example samples entry means to look in the data directory present in the directory
# where you called `snakemake` to run the pipeline).
#
####### PARAMETERS YOU NEED TO SET #######


# Download fastq files from SRA? If True, you don't need to specify paths to fastq files under samples.
# In fact, samples will go completely unused in this case
# NOTE: check if the fastq files you are downloading are all
# paired end or single end, and make sure to set PE accordingly
# below.
download_fastqs: False

# List of SRA accession codes to download fastq files from
# Only relevant if download_fastqs is True
sra_accessions: ["SRR24994162", "SRR24994161"]


## Paths to data to process
# path to directory containing fastq files if bam2bakr is False
  # fastq files can be either gzipped or unzipped
  # Each set of fastq files must be in a different directory
# path to individual bam files if bam2bakr is True
samples:
    WT_1: data/fastq/WT_1
    WT_2: data/fastq/WT_2
    WT_ctl: data/fastq/WT_ctl
    KO_1: data/fastq/KO_1
    KO_2: data/fastq/KO_2
    KO_ctl: data/fastq/KO_ctl

## example of what samples will look like for bam file input
# samples:
#   WT_1: data/bams/WT_1.bam
#   WT_2: data/bams/WT_2.bam
#   WT_ctl: data/bams/WT_ctl.bam
#   KO_1: data/bams/KO_1.bam
#   KO_2: data/bams/KO_2.bam
#   KO_ctl: data/bams/KO_ctl.bam


# -s4U control sample IDs
control_samples: ['WT_ctl', 'KO_ctl']

# Paired end? 
  # Set to True or False, no double quotes
PE: True

# Path to genome fasta file
genome: data/genome/genome.fasta


# Path to annotation gtf file
annotation: data/annotation/genome.gtf


# Which aligner to use? 
  # Options are:
    # 1) star
    # 2) hisat2
aligner: "star"
# Modify output .bam to remove read sets? (e.g. mito reads, PolIII, etc) # Added in _MTC version
  # Options are:
    # 1) yes
    # 2) no
modify_bam: "no"
path_to_removal_bed: data/annotation/removal.bed


# Path to directory containing indices
  # Indices will be built automatically if not present
  # I would suggest naming this "aligner"_index, though any
  # directory path name will do (avoid results/...; the 
  # results/ directory is where the pipeline output will be created,
  # so probably better to avoid specifying a path there that might
  # clash with the names of one of the other automatically created
  # directories). 
  # If you aren't providing this, directory must not exist at the time
  # you launch the pipeline with `snakemake ...`, or else Snakemake won't
  # know to create it.
indices: data/indices/star_index


# Strandedness
  # set to "reverse", "yes", or "no"
  # Instead of "yes", can now use "forward" as well (both will have the same result)
  # reverse means that read 2 represents 5' to 3' sequence of original RNA (read 1 thus represents its reverse complement)
  # yes means that read 1 represents 5' to 3' sequence of original RNA
  # no means unstranded
  # Used by featureCounts, though terminology comes from HTSeq
strandedness: "reverse"

# "SNP" calling # Added in _MTC
  #  bcftools call only keeps sites where bcftools determines a variant based on genotype likelihoods. If you want every site where at least n reads have a mismatch, you need a more lenient approach
  # Instead of relying on bcftools call, which applies a genotype-calling model, you can directly extract sites where at least one read shows a mismatch using mpileup and a depth-based filter.
  # Options are:
    # 1) genome_likelihoods
    # 2) counts_in_control
  # snp_counts is the minimum number of mismatches in the control for the position to be marked as a snp
snp_strategy: "counts_in_control"
snp_threshold: 3

# Features to assign reads to
  # genes = anywhere in an annotated gene body
  # exons = in exclusively exonic regions of a gene
  # tec = set of transcripts with which read overlaps; TEC = transcript equivalence class
  # exonic_bins = exonic regions as defined in DEXSeq paper (Anders et al., 2012)
  # junctions = exon-exon junctions. Only compatible with STAR-based alignment
    # as STAR's unique jI and jM bam file tags are required
  # eej = exon-exon junctions. Less accurate than junctions but compatible with any
    # bam file. A new GTF file will be created with annotation for the junction_IDs
    # that will show up in the final cB
  # eij = exon-intron junctions. A new GTF file will be created with annotation for the junction_IDs
    # that will show up in the final cB
features:
    genes: True
    exons: True
    tec: False
    exonic_bins: False
    junctions: False
    eej: False
    eij: False


####### PARAMETERS THAT TUNE ASPECTS OF PIPELINE BEHAVIOR, BUT WITH LIKELY REASONABLE DEFAULTS #######

# Types of mutations to make tracks for otherwise
  # Comma separated string of mutation type
  # Examples:
    # "TC"
      # counts T-to-C mutations
    # "TC,GA"
      # counts T-to-C and G-to-A mutations
mut_tracks: "TC"


# Normalize sequencing tracks?
normalize: True


# String common to spike-in gene_ids in annotation gtf
  # If you have no spike-ins, then this should be "\"\"", i.e., an empty string ("")
  # Used for normalization of tracks. Thus, only relevant if normalize == True
spikename: "\"\""


# Skip adapter trimming? 
  # If True, will skip fastp step
skip_trimming: False
# Should we do hard clipping of ends that happens after adapter trimming? # Added in _MTC
  # Note this only works for paired end so far
  # fastp parameters for this need to be set below
do_hardclipping: True


# Path to flattened annotation 
  # Will be created if not already present
  # Only relevant if assigning reads to exonic_bins
flat_annotation: "data/annotation/flat.gtf"


# Minimum base quality required to call mutation
minqual: 40


# Are you using the Windows subsystem for Linux?
  # Due to a bug in STAR/GNU parallel, tracks have to be created iteratively if this is the case
WSL: False


# Merge mutation counts and feature assignments in a RAM-efficient manner?
  # Downside is that it's a bit slower
lowRAM: False


# Track site-specific mutational content?
  # Not currently compatible with lowRAM = True
mutpos: False


# Use RSEM to quantify transcript isoform abundances?
  # Only relevant if aligner = 'star' and fastq files are
  # provided as input
run_rsem: True


# What final output do you want pipeline to create?
  # cB = standard cB file tracking number of mutations and number of mutable reference nucleotides in each read.
  # cUP = remove the mutable reference nucleotide count and instead compute the average of this value for reads
  #         with the same mutational content. This is orders of magnitude more compressed than a cB file (typically
  #         around 100x smaller), and is still compatible with EZbakR. Downside is the slight information loss that
  #         this compression leads to.
  # arrow = Partitioned database of parquet files, in the format necessary to pass to EZbakR.
  # 
  # At least one of these should be set to True.
  # If lowRAM == False, any combination of these can be set to True (including all True).
  # If lowRAM == True, cB and cUP can not both be true.
final_output:
  cB: True
  cUP: False
  arrow: False


####### OPTIONAL PARAMETERS FOR THE VARIOUS TOOLS AND SCRIPTS USED #######

##### FEATURECOUNTS PARAMETERS #####
# Parameters automatically specified:
  # Genes: -R -f -g gene_id -t transcript
  # Exons: -R -g gene_id -J
  # Transcripts: -R -f -g transcript_id -t exon -O
  # Exonbins: -R -f -g exon_id -t exonic_part -O
# If PE = True, then "-p --countReadPairs" is also automatically set
#
# !!DO NOT REDUNDANTLY SPECIFY AUTOMATICALLY SPECIFIED PARAMETERS!!
# Defaults suggested:
# 1) Set -M for all cases. Non-primary multi-mapping reads are filtered
# prior to running featureCounts, so we want to count all reads. There
# seems to be a bug in featureCounts that can cause some primary, multi-mapping
# reads getting unassigned. Setting -M avoids this problem.
# 2) Set --nonOverlap to 0 for exon assignment. This is the key to exonic assignment,
# ensuring that reads overlapping any non-exonic region are unassigned to tne xonic feature (XF).
# Unfortunately, soft-clipping counts as non-assignment, so it is best to either turn off soft-clipping
# in your aligner (which is done in the defaults for STAR and HISAT2 below) or increase the 
# nonOverlap parameter to allow some leniency

# Parameters for assignment of reads to genes
fc_genes_extra: "--nonOverlap 0 -M"

# Parameters for assignment of reads to exons
fc_exons_extra: "--nonOverlap 0 -M"

# Parameters for assignment of reads to exonbins
fc_exonbins_extra: "-M"

# Parameters for assignment of reads to exon-exon junctions
fc_eej_extra: "-M"

# Parameters for assignment of reads to exon-intron junctions
fc_eij_extra: "-M"


##### FASTP PARAMETERS #####
  # See https://github.com/OpenGene/fastp for details

# Adapters to pass to fastp 
  # Not strictly necessary as fastp can autodetect adapters. Autodetection is more accurate for paired-end data though.
  # For paired-end data with widely used Illumina TruSeq adapters, this could be: 
  # "--adapter_sequence AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2 AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"
fastp_adapters: ""


# Optional parameters to set for fastp
fastp_parameters: "" 
# Optional parameters to set for hard-clipping, which is the second fastp run # Added in _MTC version
fastp_hardclip_parameters: "" # --trim_tail1 6 --trim_front1 3 --trim_front2 6 --trim_tail2 3 -A


##### FASTQC PARAMETERS #####
  # See https://www.bioinformatics.babraham.ac.uk/projects/fastqc/ for details

# Optional parameters to set for fastqc
fastqc_params: ""



##### STAR PARAMETERS #####

# Optional parameters to set for star index
  # --sjdbGTFfile is automatically set to be the provided annotation file
star_index_params: ""


# SAM tags to add to alignment
star_sam_tags: ["NH", "HI", "AS", "NM", "MD", "nM"]


# Optional parameters to set for star align
  # --sjdbGTFfile is automatically set to be the provided annotation file
  # --outSAMattributes will also be set and provided the tags specified in `star_sam_tags`, overwriting whatever is set here
  # Finally, --outSAMType will be force set to BAM SortedByCoordinate, overwriting whatever is set here
  # We suggest turning off soft-clipping to improve assignment of reads to exons
star_align_params: "--alignEndsType EndToEnd --outFilterType BySJout --outFilterMismatchNmax 20 --outFilterScoreMinOverLread 0.4 --outFilterMatchNminOverLread 0.4"



##### BCFTOOLS PARAMETERS #####

# Optional parameters to pass to `bcftools mpileup`
bcftools_mpileup_params: ""

# Optional parameters to pass to `bcftools call`
bcftools_call_params: ""

##### HISAT2 PARAMETERS #####

# Optional parameters to set for hisat2 indexing
hisat2_index_params: ""


# Optional parmaeters to set for hisat2 alignment
  # NOTE: --rna-strandedness is automatically set based on required strandedness parameter
    # DON'T REDUNDANTLY SPECIFY --rna-strandedness HERE!!
  # We suggest turning off soft-clipping to improve assignment of reads to exons
hisat2_align_params: "--no-softclip"


# Index base name. If not specified, defaults to "hisat2_index"
hisat2_index_base: ""



##### RSEM PARAMETERS #####

# Optional parameters to set for RSEM indexing
rsem_index_params: ""


# Optional parameters to set for RSEM quantification
rsem_quant_params: ""


##### FASTERQDUMP PARAMETERS ######

# Optional parameters to pass to fasterq_dump if sra_download = True
fasterq_dump_extras: "--skip-technical"




##### SITE-SPECIFIC MUTATION CALLING PARAMETERS #####

# Minimum coverage for site to make it into filtered cU
min_pos_coverage: 1

# Maximum coverage allowed for site that makes it into filtered cU
max_pos_coverage: 10000000



##### JUNCTION ANNOTATION PARAMETERS #####

# Currently no adjustable parameters for this, but eventually there
# will be.
junction_annotation_params: ""





##############################
##### DEFUNCT PARAMETERS #####
##############################
# These currently do nothing, but might come back in future releases

# Add a full-gene "transcript" to annotation used for STAR + RSEM to quantify pre-mRNA.
  # This is a nice way to "regress out" pre-mRNA abundance and to identify
  # problematic gene annotations (e.g., regions where estimated pre-mRNA abundance
  # is as high if not higher than appreciably expressed isoforms).
  #
  # The annotation with the full-gene "transcript" will only be used for STAR's alignment
  # and RSEM quantification. The full-gene transcript will not be a feature to which
  # reads are assigned by featureCounts.
  # 
  # This will only have an impact if config["aligner"] is set to "star".
quantify_premRNA: False
  # Defunct as this currently has no impact on RSEM quantification


# Are there jI, jM, XF, GF, or EF tags in provided bam files?
  # These will break HTSeq or lead to unexpected behavior and will
  # thus be removed prior to running HTSeq.
  # NOTE: these tags will not be removed from the input bam files,
  # just from processed bam files generated by fastq2EZbakR
remove_tags: False
  # Defunct as HTSeq is no longer used and these tags cause no problems
  # to pipeline.

##### SALMON PARAMETERS #####
# NOT YET IMPLEMENTED

# Use Salmon for quantification?
use_salmon: False

# Path to directory containing Salmon indices
  # Created automatically if not already present
salmon_indices: "indices/salmon/"

# Determing if and how to make decoy-aware index for salmon
  # If make_decoy True, then a decoy-aware index will be made. WARNING: WILL REQUIRE LOTS OF RAM!! >100GB FOR HUMAN GENOME!!
  # There are two options for how to make this index (see Salmon docs for details: https://salmon.readthedocs.io/en/latest/salmon.html)
    # If entire_genome is True, then entire genome will be used. This provides a more comprehensive set of decoys at the cost of
    # requiring more RAM and time to build the index.
    # 
    # If entire_genome if False, then "a set of decoy sequences will be identified
    # by mapping annotated transcripts you wish to index against a hard-masked version
    # of the organism's genome." (quoted from documentation linked above). This leads to 
    # comparable performance as a whole genome decoy but is much less RAM intensive.
decoy_settings:
  make_decoy: True
  entire_genome: False

# Optional parameters for generateDecoyTranscriptome.sh script
salmon_generateDecoy_params: ""

# Read directionality
directionality: "I"

# Optional parameters for gffread (transcriptome fasta creation)
gffread_extra: ""

# Optional parameters for Salmon indexing
salmon_index_params: ""

# Optional parameters for Salmon quantification
salmon_quant_params: ""





##### LINKS TO SNAKEMAKE WRAPPERS USED #####
  # Can be useful to see how optional parameters get passed to these tools

# fastp wrapper: https://snakemake-wrappers.readthedocs.io/en/stable/wrappers/fastp.html

# fastqc wrapper: https://snakemake-wrappers.readthedocs.io/en/stable/wrappers/fastqc.html
